@model EmploiDuTemps
@using PFA_TEMPLATE.Models
@using PFA_TEMPLATE.ViewModels
@{
    ViewData["Title"] = "Mon emploi du temps";
}@{
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}
<!-- Main container -->
<div class="schedule-container">
    <!-- Employee info header -->
    <div class="employee-card">
        <h2>Planning de @(Model.Employee?.Utilisateur?.Prenom ?? "Inconnu") @(Model.Employee?.Utilisateur?.Nom ?? "Inconnu")</h2> 
        <p>Généré le @Model.DateGeneration.ToString("dd/MM/yyyy à HH:mm")</p>
    </div>

    <!-- Action buttons -->
    <div class="action-row">  
        <a href="javascript:void(0)" onclick="exportPDF()" class="btn btn-primary">
            <i class="fas fa-file-pdf"></i> Exporter PDF
        </a>
    </div>

    <!-- Calendar card -->
    <div class="calendar-card">
        <div class="calendar-header">
            <i class="far fa-calendar-alt"></i> Planning du @Model.ContraintesPlanning.DateDebut.ToString("dd/MM/yyyy") au @Model.ContraintesPlanning.DateFin.ToString("dd/MM/yyyy")
        </div>
        <div class="calendar-body">
            <div id="calendar"></div>

            <!-- Legend -->
            <div class="activity-legend">
                <h4>Légende</h4>
                <div class="legend-items">
                    <div class="legend-item">
                        <div class="color-box travail"></div>
                        <span>Travail</span>
                    </div>
                    <div class="legend-item">
                        <div class="color-box pause"></div>
                        <span>Pause</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" /> 
    <link href="~/css/emploi.css" rel="stylesheet" asp-append-version="true" />
}
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/locales-all.min.js"></script>
 
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>

    <script>
        var calendar; // Déclarer calendar au niveau global pour y accéder dans exportPDF

        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            // Create an array of events from the model
            var modelEvents = [];

        @foreach (var plage in Model.PlagesHoraires)
        {
            @: modelEvents.push({
            @: id: '@plage.Id',
            @: title: '@plage.Commentaire',
            @: start: '@plage.DateDebut.ToString("yyyy-MM-ddTHH:mm:ss")',
            @: end: '@plage.DateFin.ToString("yyyy-MM-ddTHH:mm:ss")',
            @: className: 'fc-event-@plage.TypeActivite.ToLower()'
            @:});
        }

            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridWeek',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                locale: 'fr',
                slotMinTime: '@Model.ContraintesPlanning.HeureDebutJournee:00',
                slotMaxTime: '@Model.ContraintesPlanning.HeureFinJournee:00',
                allDaySlot: false,
                height: 'auto',
                events: modelEvents,
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                }
            });

            calendar.render();
        });

        // Fonction pour l'impression directe de l'emploi du temps
        function printSchedule() {
            // Créer un élément temporaire pour l'impression
            const printContent = document.createElement('div');
            printContent.classList.add('print-container');

            // Titre simple pour l'impression
            const title = document.createElement('h2');
            title.textContent = document.querySelector('.employee-card h2').textContent;
            title.style.textAlign = 'center';
            title.style.marginBottom = '10px';
            printContent.appendChild(title);

            // Ajouter des informations sur la période
            const periodInfo = document.createElement('p');
            periodInfo.classList.add('period-info');
            periodInfo.textContent = document.querySelector('.calendar-header').textContent.trim();
            periodInfo.style.textAlign = 'center';
            periodInfo.style.marginBottom = '15px';
            printContent.appendChild(periodInfo);

            // Préparer les données du calendrier pour l'impression
            const printCalendar = document.createElement('div');
            printCalendar.id = 'print-calendar';
            printCalendar.classList.add('print-calendar');
            printContent.appendChild(printCalendar);

            // Ajouter un conteneur pour la légende en bas
            const legendContainer = document.createElement('div');
            legendContainer.style.marginTop = '10px';
            legendContainer.style.display = 'flex';
            legendContainer.style.justifyContent = 'center';
            
            // Ajouter les éléments de légende
            const travailLegend = document.createElement('div');
            travailLegend.style.marginRight = '20px';
            travailLegend.innerHTML = '<span style="display: inline-block; width: 15px; height: 15px; background-color: #4caf50; margin-right: 5px;"></span> Travail';
            
            const pauseLegend = document.createElement('div');
            pauseLegend.innerHTML = '<span style="display: inline-block; width: 15px; height: 15px; background-color: #ff9800; margin-right: 5px;"></span> Pause';
            
            legendContainer.appendChild(travailLegend);
            legendContainer.appendChild(pauseLegend);
            printContent.appendChild(legendContainer);

            // Ajouter le contenu temporaire au body
            document.body.appendChild(printContent);

            // Initialiser un nouveau calendrier optimisé pour l'impression
            const printCalendarEl = document.getElementById('print-calendar');
            const printView = new FullCalendar.Calendar(printCalendarEl, {
                initialView: 'timeGridWeek',
                headerToolbar: false, // Pas d'en-tête de navigation
                locale: 'fr',
                slotMinTime: calendar.getOption('slotMinTime'),
                slotMaxTime: calendar.getOption('slotMaxTime'),
                allDaySlot: false,
                height: 'auto',
                events: calendar.getEvents(),
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                },
                // Options spécifiques pour l'impression
                contentHeight: 'auto',
                timeZone: 'local'
            });

            printView.render();

            // Attendre que le calendrier soit complètement rendu
            setTimeout(() => {
                window.print();

                // Nettoyer après l'impression
                setTimeout(() => {
                    document.body.removeChild(printContent); 
                }, 1000);
            }, 500);
        }

        // Remplacer la fonction exportPDF existante pour imprimer directement
        function exportPDF() {
            printSchedule();
        }
    </script>
}